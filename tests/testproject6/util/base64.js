const b64=new Array(64);const s64=new Array(123);for(let e=0;e<64;)s64[b64[e]=e<26?e+65:e<52?e+71:e<62?e-4:e-59|43]=e++;const INVALID_ENCODING="invalid encoding";export function length(e){let r=e.length;if(!r)return 0;let t=0;while(--r%4>1&&"="===e.charAt(r))++t;return Math.ceil(3*e.length)/4-t}export function encode(e,r,t){let n=null;const o=[];let i=0;let a=0;let c=0;while(r<t){const t=e[r++];switch(a){case 0:o[i++]=b64[t>>2];c=(3&t)<<4;a=1;break;case 1:o[i++]=b64[c|t>>4];c=(15&t)<<2;a=2;break;case 2:o[i++]=b64[c|t>>6];o[i++]=b64[63&t];a=0;break}if(i>8191){(n||(n=[])).push(String.fromCharCode.apply(String,o));i=0}}if(a){o[i++]=b64[c];o[i++]=61;if(1===a)o[i++]=61}if(n){if(i)n.push(String.fromCharCode.apply(String,o.slice(0,i)));return n.join("")}return String.fromCharCode.apply(String,o.slice(0,i))}export function decode(e,r,t){const n=t;let o=0;let i=0;for(let n=0;n<e.length;){let a=e.charCodeAt(n++);if(61===a&&o>1)break;if(void 0===(a=s64[a]))throw Error(INVALID_ENCODING);switch(o){case 0:i=a;o=1;break;case 1:r[t++]=i<<2|(48&a)>>4;i=a;o=2;break;case 2:r[t++]=(15&i)<<4|(60&a)>>2;i=a;o=3;break;case 3:r[t++]=(3&i)<<6|a;o=0;break}}if(1===o)throw Error(INVALID_ENCODING);return t-n}export function test(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)}
